// <auto-generated />
using System;
using CodefirstByEF6.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodefirstByEF6.Migrations
{
    [DbContext(typeof(DbConn))]
    partial class DbConnModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("MemberManagement1.Models.ContactModel", b =>
                {
                    b.Property<string>("commonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contactType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contactValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("memberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("commonId");

                    b.HasIndex("commonId")
                        .IsUnique();

                    b.HasIndex("memberId");

                    b.ToTable("ContactModels");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberModel", b =>
                {
                    b.Property<string>("memberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("memberBirthday")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("memberJoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("memberNickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sexual")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("memberId");

                    b.HasIndex("memberId")
                        .IsUnique();

                    b.ToTable("MemberModels");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberTagModel", b =>
                {
                    b.Property<string>("memberTagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("tagComments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("memberTagId");

                    b.HasIndex("memberTagId")
                        .IsUnique();

                    b.ToTable("MemberTagModels");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberWechatModel", b =>
                {
                    b.Property<string>("wechatId")
                        .HasColumnType("TEXT");

                    b.Property<string>("area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("memberId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sexual")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("wechatId");

                    b.HasIndex("memberId");

                    b.HasIndex("wechatId")
                        .IsUnique();

                    b.ToTable("MemberWechatModels");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberWithMemberTagModel", b =>
                {
                    b.Property<string>("memberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("memberTagId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("similarScore")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("supportScore")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("tagScore")
                        .HasColumnType("TEXT");

                    b.HasKey("memberId", "memberTagId");

                    b.HasIndex("memberTagId");

                    b.ToTable("memberWithMemberTagModels");
                });

            modelBuilder.Entity("MemberManagement1.Models.ContactModel", b =>
                {
                    b.HasOne("MemberManagement1.Models.MemberModel", "member")
                        .WithMany("contacts")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("member");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberWechatModel", b =>
                {
                    b.HasOne("MemberManagement1.Models.MemberModel", "member")
                        .WithMany("memberWechats")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("member");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberWithMemberTagModel", b =>
                {
                    b.HasOne("MemberManagement1.Models.MemberModel", "member")
                        .WithMany("memberWithMemberTags")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemberManagement1.Models.MemberTagModel", "memberTag")
                        .WithMany("memberWithMemberTags")
                        .HasForeignKey("memberTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("member");

                    b.Navigation("memberTag");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberModel", b =>
                {
                    b.Navigation("contacts");

                    b.Navigation("memberWechats");

                    b.Navigation("memberWithMemberTags");
                });

            modelBuilder.Entity("MemberManagement1.Models.MemberTagModel", b =>
                {
                    b.Navigation("memberWithMemberTags");
                });
#pragma warning restore 612, 618
        }
    }
}
